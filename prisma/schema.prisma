generator kysely {
  provider = "prisma-kysely"

  output = "../src/lib/db"
  fileName = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model club {
  id      Int      @id @default(autoincrement())
  name    String
  meetups meetup[]
}

model user {
  id              Int     @id @default(autoincrement())
  email           String?  @unique
  // pass hash can be null when migrating
  pass_hash       String?
  name            String
  region          region
  is_club_organiser Boolean @default(false)

  sessions session[]

  organiser_for organiser_in_meetup[]
  competing_in  user_in_meetup[]
  results      result[]
}

// INFO: using session authentication instead of token
model session {
  id Bytes  @id
  ip String

  user   user @relation(fields: [user_id], references: [id])
  user_id Int
}

model user_in_meetup {
  user   user @relation(fields: [user_id], references: [id])
  user_id Int

  meetup   meetup @relation(fields: [meetup_id], references: [id])
  meetup_id Int

  registered_events puzzle[]

  @@id([user_id, meetup_id])
}

model organiser_in_meetup {
  user   user @relation(fields: [user_id], references: [id])
  user_id Int

  meetup   meetup @relation(fields: [meetup_id], references: [id])
  meetup_id Int

  @@id([user_id, meetup_id])
}

model meetup {
  id              Int    @id @default(autoincrement())
  name            String
  venue           String
  location        String
  organisers      organiser_in_meetup[] // TODO: check relation?
  description     String
  contact         String
  competitor_limit Int?

  external_registration_link String?
  registration_information  String  @default("")

  date DateTime @db.Date

  is_published Boolean @default(false)

  users user_in_meetup[]

  club   club @relation(fields: [club_id], references: [id])
  club_id Int

  rounds round[]
}

model round {
  id        String @db.Uuid @id @default(uuid())

  start_date DateTime
  end_date   DateTime
  puzzle    puzzle
  format    format
  proceed_number Int
  results   result[]


  meetup   meetup @relation(fields: [meetup_id], references: [id])
  meetup_id Int
}

model result {
  id      Int   @id @default(autoincrement())

  solves solve[]
  value Float

  mbld_score Int?
  mbld_total Int?

  user   user    @relation(fields: [user_id], references: [id])
  user_id Int

  round   round @relation(fields: [round_id], references: [id])
  round_id String @db.Uuid
}

model solve {
  index Int
  time  Float

  mbld_score Int?
  mbld_total Int?

  result   result @relation(fields: [result_id], references: [id], onDelete: Cascade)
  result_id Int

  @@id([result_id, index])
}

enum region {
  NORTHLAND
  AUCKLAND
  WAIKATO
  BOP
  GISBORNE
  HAWKES_BAY
  TARANAKI
  MANAWATU_WHANGANUI
  WELLINGTON
  TASMAN
  NELSON
  MARLBOROUGH
  WEST_COAST
  CANTERBURY
  OTAGO
  SOUTHLAND

  VISITOR
}

enum puzzle {
  THREE
  TWO
  FOUR
  FIVE
  SIX
  SEVEN

  SQ1
  SKEWB
  PYRA
  MEGA
  OH
  CLOCK

  FMC
  THREEBLD
  MULTIBLD
  FOURBLD
  FIVEBLD
}

enum format {
  BO3
  BO1
  MO3
  AO5
}

